{"version":3,"sources":["index.js"],"names":["window","MediaRecorder","AudioRecorder","button","document","body","appendChild","createElement","classList","add","textContent","recorder","duration","timer","stopRecording","stop","stream","getTracks","forEach","i","onclick","navigator","mediaDevices","getUserMedia","audio","then","addEventListener","e","arrayBuffer","reader","FileReader","onload","event","Uint8Array","target","result","Array","from","blobURL","URL","createObjectURL","data","Streamlit","setComponentValue","JSON","stringify","readAsArrayBuffer","clearTimeout","start","setTimeout","events","RENDER_EVENT","detail","disabled","args","setFrameHeight","setComponentReady"],"mappings":"8KAAA,yBAEAA,OAAOC,cAAgBC,IAIvB,IACMC,EADOC,SAASC,KAAKC,YAAYF,SAASG,cAAc,SAC1CD,YAAYF,SAASG,cAAc,WAEvDJ,EAAOK,UAAUC,IAAI,gBACrBN,EAAOO,YAAc,kBAGrB,IAAIC,EAAW,KACXC,EAAW,IACXC,EAAQ,KAmCZ,SAASC,IAEPH,EAASI,OACTZ,EAAOO,YAAc,kBAGrBC,EAASK,OAAOC,YAAYC,SAAQ,SAAAC,GAAC,OAAIA,EAAEJ,UAvC7CZ,EAAOiB,QAAU,WAGfC,UAAUC,aAAaC,aAAa,CAAEC,OAAO,IAAQC,MAAK,SAAAT,IACxDL,EAAW,IAAIV,cAAce,IAGpBU,iBAAiB,iBAAiB,SAAAC,GACzC,IAAIC,EACAC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvBJ,EAAc,IAAIK,WAAWD,EAAME,OAAOC,QAC1CP,EAAcQ,MAAMC,KAAKT,GACzB,IAAIU,EAAUC,IAAIC,gBAAgBb,EAAEc,MACpCC,IAAUC,kBAAkBC,KAAKC,UAAU,CAAC,KAAQjB,EAAa,IAAOU,MAE1ET,EAAOiB,kBAAkBnB,EAAEc,SAGf,OAAV5B,GACFkC,aAAalC,GAIfF,EAASqC,QACT7C,EAAOO,YAAc,oBACrBgC,IAAUC,kBAAkB,WAG5B9B,EAAQoC,WAAWnC,EAAeF,OAoCtC8B,IAAUQ,OAAOxB,iBAAiBgB,IAAUS,cAlB5C,SAAkBnB,GAEhB,IAAMS,EAAOT,EAAMoB,OAGnBjD,EAAOkD,SAAWZ,EAAKY,SAGvBzC,EAAW6B,EAAKa,KAAL,SAMXZ,IAAUa,oBAQZb,IAAUc,oBAIVd,IAAUa,mB","file":"static/js/main.6400d46d.chunk.js","sourcesContent":["import { Streamlit } from \"streamlit-component-lib\"\nimport AudioRecorder from 'audio-recorder-polyfill'\nwindow.MediaRecorder = AudioRecorder\n\n// Add text and a button to the DOM. (You could also add these directly\n// to index.html.)\nconst span = document.body.appendChild(document.createElement(\"span\"))\nconst button = span.appendChild(document.createElement(\"button\"))\n\nbutton.classList.add(\"covid-button\");\nbutton.textContent = \"Start Recording\"\n\n// Add a click handler to our button. It will send data back to Streamlit.\nlet recorder = null;\nlet duration = 5000;\nlet timer = null;\n\nbutton.onclick = function() {\n  // Streamlit via `Streamlit.setComponentValue`.\n  // Request permissions to record audio\n  navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\n    recorder = new MediaRecorder(stream) // MediaRecorder\n\n    // Set record to <audio> when recording will be finished\n    recorder.addEventListener('dataavailable', e => {\n      var arrayBuffer;\n      var reader = new FileReader();\n      reader.onload = function(event) {\n        arrayBuffer = new Uint8Array(event.target.result);\n        arrayBuffer = Array.from(arrayBuffer);\n        let blobURL = URL.createObjectURL(e.data)\n        Streamlit.setComponentValue(JSON.stringify({\"data\": arrayBuffer, \"url\": blobURL})) //     Object({'url': blobURL, 'data': }))\n      };\n      reader.readAsArrayBuffer(e.data);\n    })\n\n    if (timer !== null) {\n      clearTimeout(timer);\n    }\n\n    // Start recording\n    recorder.start()\n    button.textContent = 'Restart Recording'\n    Streamlit.setComponentValue('clicked')\n\n    // Triger stop after delay\n    timer = setTimeout(stopRecording, duration)\n  })\n}\n\nfunction stopRecording() {\n  // Stop recording\n  recorder.stop()\n  button.textContent = \"Start Recording\"\n\n  // Remove “recording” icon from browser tab\n  recorder.stream.getTracks().forEach(i => i.stop())\n}\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event) {\n  // Get the RenderData from the event\n  const data = event.detail\n\n  // Disable our button if necessary.\n  button.disabled = data.disabled\n\n  // Get component recording duration\n  duration = data.args[\"duration\"]\n\n  // We tell Streamlit to update our frameHeight after each render event, in\n  // case it has changed. (This isn't strictly necessary for the example\n  // because our height stays fixed, but this is a low-cost function, so\n  // there's no harm in doing it redundantly.)\n  Streamlit.setFrameHeight()\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"],"sourceRoot":""}